# set lets
$worker  = 2
$timeout = 30
$app_dir = "/var/www/Portfolio"
$listen  = File.expand_path 'tmp/sockets/unicorn.sock', $app_dir
$pid     = File.expand_path 'tmp/pids/unicorn.pid', $app_dir
$std_log = File.expand_path 'log/unicorn.log', $app_dir

# set config
## Unicornは複数のワーカーで起動するのでワーカー数を定義
## サーバーのメモリなどによって変更すること。
worker_processes  $worker

## Unicornの起動コマンドを実行するディレクトリを指定
working_directory $app_dir

## Unicornのエラーログと通常ログの位置を指定
stdout_path $std_log
stderr_path $std_log

## 接続タイムアウト時間
timeout $timeout

## Nginxでのlisten指定 unicornを呼ぶ
listen '/var/www/Portfolio/tmp/sockets/unicorn.sock'

## プロセスの停止等に必要なpidファイルの保存先を指定
pid $pid

## loading booster : Unicornの再起動時にダウンタイムなしで再起動が行われる
preload_app true

## before starting processes
## - $ kill -USR2 `cat /path/to/unicorn.pid` のようなUSR2で再起動をかける時に、新プロセスを立ち上げて旧プロセスを停止する
## before starting processes
before_fork do |server, worker|
  defined?(ActiveRecord::Base) and ActiveRecord::Base.connection.disconnect!
  old_pid = "#{server.config[:pid]}.oldbin"
  if old_pid != server.pid
    begin
      Process.kill "QUIT", File.read(old_pid).to_i
    rescue Errno::ENOENT, Errno::ESRCH
    end
  end
end
# after finishing processes
after_fork do |server, worker|
  defined?(ActiveRecord::Base) and ActiveRecord::Base.establish_connection
end
